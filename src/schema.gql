# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Auth {
  """Example field (placeholder)"""
  exampleField: Int!
}

type Comment {
  """Example field (placeholder)"""
  exampleField: Int!
}

type CommentNestedInsidePost {
  commentedBy: CommentedBy!
  content: String!
}

type CommentedBy {
  id: ID!
  username: String!
}

input CreateCommentInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input CreateEventInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input CreateFollowInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input CreateLikeInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input CreatePostInput {
  description: String!
  title: String!
}

input CreateTokenInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Event {
  """Example field (placeholder)"""
  exampleField: Int!
}

type Follow {
  """Example field (placeholder)"""
  exampleField: Int!
}

type Like {
  """Example field (placeholder)"""
  exampleField: Int!
}

input LoginUserInput {
  email: String!
  password: String!
}

type Mutation {
  createComment(createCommentInput: CreateCommentInput!): Comment!
  createEvent(createEventInput: CreateEventInput!): Event!
  createFollow(createFollowInput: CreateFollowInput!): Follow!
  createLike(createLikeInput: CreateLikeInput!): Like!
  createPost(createPostInput: CreatePostInput!): PostType!
  createToken(createTokenInput: CreateTokenInput!): Token!
  login(loginUserInput: LoginUserInput!): String!
  registerUser(registerUserInput: RegisterUserInput!): UserType!
  removeAuth(id: Int!): Auth!
  removeComment(id: Int!): Comment!
  removeEvent(id: Int!): Event!
  removeFollow(id: Int!): Follow!
  removeLike(id: Int!): Like!
  removePost(id: Int!): PostType!
  removeToken(id: Int!): Token!
  removeUser(id: Int!): UserType!
  updateAuth(updateAuthInput: UpdateAuthInput!): Auth!
  updateComment(updateCommentInput: UpdateCommentInput!): Comment!
  updateEvent(updateEventInput: UpdateEventInput!): Event!
  updateFollow(updateFollowInput: UpdateFollowInput!): Follow!
  updateLike(updateLikeInput: UpdateLikeInput!): Like!
  updatePost(updatePostInput: UpdatePostInput!): PostType!
  updateToken(updateTokenInput: UpdateTokenInput!): Token!
  updateUser(updateUserInput: UpdateUserInput!): UserType!
  verifyUser(emailVerificationToken: String!): UserType!
}

type Owner {
  id: ID!
  username: String!
}

type PostType {
  commentCount: Int!
  description: String!
  id: ID!
  latesComments: [CommentNestedInsidePost!]!
  likeCount: Int!
  owner: Owner!
  title: String!
}

type Query {
  comment(id: Int!): Comment!
  event(id: Int!): Event!
  follow(id: Int!): Follow!
  getAllPosts(limit: Int, page: Int, skip: Int): [PostType!]!
  like(id: Int!): Like!
  lo(id: Int!): UserType!
  me: UserType!
  post(id: Int!): PostType!
  token(id: Int!): Token!
  user: [UserType!]!
}

input RegisterUserInput {
  email: String!
  password: String!
  username: String!
}

type Token {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateAuthInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input UpdateCommentInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input UpdateEventInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input UpdateFollowInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input UpdateLikeInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input UpdatePostInput {
  description: String
  id: Int!
  title: String
}

input UpdateTokenInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input UpdateUserInput {
  email: String
  id: Int!
  password: String
  username: String
}

enum UserRole {
  Active
  Blocked
  Inactive
}

type UserType {
  _id: String!
  email: String!
  emailVerificationToken: String
  followees: [ID!]!
  followers: [ID!]!
  mailVerifiedAt: DateTime
  status: UserRole!
  username: String!
}